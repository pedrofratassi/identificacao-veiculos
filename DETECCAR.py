# -*- coding: utf-8 -*-
"""DETECCAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TCyb7ob2taTkIa1GQRkVx8uyPnHttyX7
"""

# -*- coding: utf-8 -*-
"""DETECCAR: Detec√ß√£o de Ve√≠culos e Controle de Sem√°foros Inteligentes com YOLOv8"""

# üìå Importa√ß√£o das bibliotecas necess√°rias
import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import random
import warnings
import yaml
from PIL import Image
from ultralytics import YOLO
from IPython.display import Video, display

warnings.filterwarnings('ignore')  # Removendo avisos desnecess√°rios

# üìå Configura√ß√£o do Seaborn para visualiza√ß√£o de gr√°ficos
sns.set(rc={'axes.facecolor': '#eae8fa'}, style='darkgrid')

# üìå Caminhos dos arquivos (ajuste conforme o seu diret√≥rio)
DATASET_PATH = '/content/drive/MyDrive/Colab Notebooks/Banco de Dados'
VIDEO_PATH = '/content/drive/MyDrive/Colab Notebooks/transito.mp4'  # üìå Caminho do v√≠deo
MODEL_PATH = 'yolov8n.pt'  # üìå Modelo YOLOv8 pr√©-treinado

# üìå Par√¢metros do Sem√°foro Inteligente
SEMAPHORE_PARAMS = {
    'tempo_verde_base': 30,
    'tempo_vermelho_pedestre': 15,
    'limite_veiculos_prioridade': 8,
    'tempo_emergencia': 20
}

# üìå Carregar Modelo YOLO
model = YOLO(MODEL_PATH)

# üìå Classe de Controle do Sem√°foro Inteligente
class TrafficLightController:
    def __init__(self, params):
        self.params = params
        self.current_state = {'via_principal': 'VERDE', 'via_secundaria': 'VERMELHO'}

    def update_state(self, veiculos, pedestres, emergencia):
        if emergencia:
            self.current_state = {'via_principal': 'VERDE', 'via_secundaria': 'VERMELHO'}
            return self.params['tempo_emergencia']
        if pedestres:
            self.current_state = {'via_principal': 'VERMELHO', 'via_secundaria': 'VERDE'}
            return self.params['tempo_vermelho_pedestre']
        if veiculos > self.params['limite_veiculos_prioridade']:
            return self.params['tempo_verde_base'] + 10
        return self.params['tempo_verde_base']

# üìå Simula√ß√£o de Cen√°rios para Testes
class TrafficSimulator:
    def generate_scenario(self, scenario_type):
        if scenario_type == 'rush_hour':
            return {'veiculos': random.randint(10, 20), 'pedestres': False, 'emergencia': False}
        elif scenario_type == 'emergency':
            return {'veiculos': 5, 'pedestres': False, 'emergencia': True}
        elif scenario_type == 'pedestrian':
            return {'veiculos': 3, 'pedestres': True, 'emergencia': False}
        else:
            return {'veiculos': 0, 'pedestres': False, 'emergencia': False}

# üìå Fun√ß√£o para Detec√ß√£o de Ve√≠culos em V√≠deo com Cen√°rios
def detectar_veiculos_video(video_path, output_path="processed_video.mp4"):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        raise ValueError(f"N√£o foi poss√≠vel abrir o v√≠deo: {video_path}")

    # Configura√ß√µes do v√≠deo
    frame_width, frame_height = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

    # Inicializar controlador de sem√°foro e simulador
    controller = TrafficLightController(SEMAPHORE_PARAMS)
    simulator = TrafficSimulator()

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Detec√ß√£o de ve√≠culos
        results = model.predict(frame, imgsz=640, conf=0.7)
        veiculos = len(results[0].boxes)
        emergencia = 'ambulance' in results[0].names  # Verifica presen√ßa de ambul√¢ncia

        # üîπ Escolher um cen√°rio aleat√≥rio a cada frame
        scenario_type = random.choice(["rush_hour", "emergency", "pedestrian"])
        scenario = simulator.generate_scenario(scenario_type)

        # üîπ Aplicar controle do sem√°foro baseado no cen√°rio
        tempo_verde = controller.update_state(
            veiculos=scenario['veiculos'],
            pedestres=scenario['pedestres'],
            emergencia=scenario['emergencia']
        )

        # üîπ Anota√ß√£o do frame com o cen√°rio e tempo de sem√°foro
        frame = results[0].plot()
        cv2.putText(frame, f"Cenario: {scenario_type} | Estado: {controller.current_state} | Tempo: {tempo_verde}s",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        # Salva o frame processado
        out.write(frame)

    cap.release()
    out.release()
    print(f"‚úÖ V√≠deo processado salvo em: {output_path}")

    # Exibir v√≠deo processado
    display(Video(output_path, embed=True, width=640))

# üìå Teste de Cen√°rios de Tr√°fego
def testar_cenarios():
    test_cases = [
        ('rush_hour', 'Aumentar tempo verde para aliviar tr√¢nsito'),
        ('emergency', 'Priorizar via principal para ve√≠culos de emerg√™ncia'),
        ('pedestrian', 'Ativar vermelho para ve√≠culos e permitir travessia de pedestres')
    ]

    controller = TrafficLightController(SEMAPHORE_PARAMS)
    simulator = TrafficSimulator()

    print("\nüîé **Testando cen√°rios do sem√°foro inteligente:**\n")

    for cenario, descricao in test_cases:
        dados = simulator.generate_scenario(cenario)
        tempo = controller.update_state(**dados)
        print(f"üö¶ [Cenario: {cenario}] {descricao} | Tempo ajustado: {tempo}s")

# üîπ Testar os cen√°rios
testar_cenarios()

if __name__ == "__main__":
    testar_cenarios()  # Testar os cen√°rios simulados de tr√°fego
    detectar_veiculos_video(VIDEO_PATH)  # Processar o v√≠deo do tr√¢nsito

# Baixando v√≠deo caso n√£o apare√ßa na c√©lula anterior
from google.colab import files

# Caminho do v√≠deo processado (ajuste se necess√°rio)
video_path = "processed_video.mp4"

# Baixar o v√≠deo
files.download(video_path)